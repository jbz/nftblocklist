#!/bin/bash

yell() { echo "$0: $*" >&2; }
die() { yell "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }

## nftblocklist - a script to manage dynamic and persistent IP blocklists using nftables.
#
#   Requirements:  nftables, iprange, jq, json_pp 

## Check for required programs via try()
_requirements="nft iprange jq json_pp awk tr grep"

for i in `echo "${_requirements}"` ; do
  try which "${i}" >> /dev/null
done


## Default values

# Default config file location
export NFTABLES_CONFIG_LOCATION="${NFTABLES_CONFIG_LOCATION:-/etc/nftables.conf}"

# Default persistent blocklist file location
export BLOCKLIST_LOCATION="${BLOCKLIST_LOCATION:-/etc/nftables.blocklist}"

# Default Location of blocklist to load/combine
export BLOCKLIST_INPUT="${BLOCKLIST_LOCATION}"

# Default manual blocklist input file location
export BLOCKLIST_OVERRIDE_LOCATION="${BLOCKLIST_OVERRIDE_LOCATION:-/etc/nftables.blockcidrs}"

# Default temp file for blocklist processing
export BLOCKLIST_TMP_LOCATION="${BLOCKLIST_TMP_LOCATION:-/tmp/nftblocklist.tmp}"

# Default nft filter name
export NFTABLES_FILTER="${NFTABLES_FILTER:-inet filter}"

# Default dynamic blocklist set name
export BLOCKLIST_DYN_SET="${BLOCKLIST_DYN_SET:-blocklist_dyn}"

# Default persistent blocklist set name
export BLOCKLIST_PERSISTENT_SET="${BLOCKLIST_PERSISTENT_SET:-blocklist_persist}"


## Handle logging/output with verbosity levels
# set default verbosity level to notice
VERBOSITY="${VERBOSITY:-5}"

declare -A LOG_LEVELS
# https://en.wikipedia.org/wiki/Syslog#Severity_level
LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")

function log ()
{
  local LEVEL=${1}
  shift
  if [ ${VERBOSITY} -ge ${LEVEL} ]; then
    if [ ${LEVEL} -le 2 ]; then
      # output this log to stderr since it's below loglevel 3
      echo "[${LOG_LEVELS[$LEVEL]}]" "$@" >&2
    else
      # output this message to stdout since it's above loglevel 2
      echo "[${LOG_LEVELS[$LEVEL]}]" "$@" >&1
    fi
  fi
}


## Primary functions

help() 
{
    # Display help text
    echo
    echo "nftblocklist - a script to manage a persistent nftables IPv4 blocklist."
    echo
    echo "Syntax: $0 [-h] [-d|dump] [-l|load] [-r|reload]"
    echo "-d       Dump current nftables dynamic blocklist and combine with persistent list to create new static blocklist."
    echo "-l       Flush persistent blocklist set in nftables, then load persistent list to blocklist set."
    echo "-r       Dump new blocklist, then flush persistent blocklist set and load static list.  Does not restart nftables."
    echo "-a       Analyze input blocklist files and report on IP/range/CIDR counts."
    echo "-o       Output path for resulting blocklist file, default is /etc/nftables.blocklist."
    echo "-i       Input path for existing blocklist file to include, default is /etc/nftables.blocklist."
    echo "-n       Dry run - don't actually make changes, just log.  Best used with -v or -vv."
    echo "-v       Increase verbosity/raise log level.  Default is log level 5 (notice) so -v or -vv will increase to 6 (info) or 7 (debug)."
    echo 
}

dump()
{
    # Dump nftables dynamic blocklist, combine with existing static blocklist, and optimize to new static blocklist
    log 6  "Dumping nftables dynamic blocklist..."

    # If current output file is being overwritten, make a backup first:
    if [ -e $BLOCKLIST_LOCATION ]; then
        log 6 "Making backup of existing blocklist at $BLOCKLIST_LOCATION.backup, overwriting any existing backup..."
        try /bin/cp $BLOCKLIST_LOCATION "$BLOCKLIST_LOCATION.backup"
    fi

    # Dump current dynamic blocklist set contents from nft; use jq and grep to convert to a file with 1 ipv4addr per line
    try /usr/sbin/nft -j list ruleset | \
    try /usr/bin/json_pp | \
    try /usr/bin/jq '.[]|.[]|.[]| select(.name=="'$BLOCKLIST_DYN_SET'")|.elem' | \
    /usr/bin/grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | cat > $BLOCKLIST_TMP_LOCATION

    log 6 "Combining existing blocklist and manual ranges..."

    # Append the current blocklist file contents if it exists at $BLOCKLIST_LOCATION
    if [ -e $BLOCKLIST_INPUT ]; then
        try cat $BLOCKLIST_INPUT >> $BLOCKLIST_TMP_LOCATION
    else
	log 3 "Input blocklist file not found!"
	exit 1
    fi

    log 6 "Dedup-ing and optimizing blocklist ranges..."

    # Use iprange to merge and optimize the list, and include the manual file if it exists
    if [ -e $BLOCKLIST_OVERRIDE_LOCATION ]; then
        try /usr/bin/iprange $BLOCKLIST_OVERRIDE_LOCATION $BLOCKLIST_TMP_LOCATION > $BLOCKLIST_LOCATION
    else
        try /usr/bin/iprange $BLOCKLIST_TMP_LOCATION > $BLOCKLIST_LOCATION
    fi

    # Clean up
    log 6 "Cleaning up temp files..."
    try /bin/rm -f $BLOCKLIST_TMP_LOCATION

    log 6 "Blocklist dump and optimize complete! New blocklist saved to $BLOCKLIST_LOCATION"
}


load() 
{
    # Flush persistent set in nftables, then load static blocklist into persistent set
    log 6 "FLushing persistent blocklist set in nftables..."
    try /usr/sbin/nft flush set $NFTABLES_FILTER $BLOCKLIST_PERSISTENT_SET

    log 6 "Loading static blocklist into persistent set..."
    try /usr/bin/xargs -n1000 /bin/sh -c 'nft add element $NFTABLES_FILTER $BLOCKLIST_PERSISTENT_SET { $( echo "$@" | tr " " ",") }' -- < $BLOCKLIST_LOCATION
}

flushdynblocklist()
{
    # Flush the dynamic blocklist set
    log 6 "Flushing the dynamic blocklist..."
    try /usr/sbin/nft flush set $NFTABLES_FILTER $BLOCKLIST_DYN_SET
}

analyze()
{
    # Run iprange on the blocklist and output the summary
    if [ -e $BLOCKLIST_OVERRIDE_LOCATION ]; then
	    echo "Blocklist IP information from input ($BLOCKLIST_INPUT) and override ($BLOCKLIST_OVERRIDE_LOCATION) files:"
        try /usr/bin/iprange -v $BLOCKLIST_INPUT $BLOCKLIST_OVERRIDE_LOCATION 2>&1 > /dev/null | grep "totals"
    else
	    echo "Blocklist IP information from input ($BLOCKLIST_INPUT) file:"
        try /usr/bin/iprange -v $BLOCKLIST_INPUT 2>&1 > /dev/null | grep "totals"
    fi
}
        

# Handle options and execute

while getopts ":v" opt; do
    case $opt in
        v)
      if (( VERBOSITY < 7 )); then
        ((VERBOSITY++))
      fi
        ;;
    esac
done

log 6 "Verbosity level set to $VERBOSITY"

OPTIND=0
while getopts ":o:i:s:hdlranv:" opt; do
  case ${opt} in
    o)
      export BLOCKLIST_LOCATION=${OPTARG}
      log 7 "Blocklist output file location: $BLOCKLIST_LOCATION"
      ;;
    i)
      export BLOCKLIST_INPUT=${OPTARG}
      log 7 "Blocklist input file location: $BLOCKLIST_INPUT"
      ;;
    s)
      export BLOCKLIST_PERSISTENT_SET=${OPTARG}
      log 7 "Blocklist persistent set name: $BLOCKLIST_PERSISTENT_SET"
      ;;
    h)
      help
      exit;;
    d)
      log 7 "Dump function called"
      dump
      exit;;
    l)
      log 7 "Load function called"
      load 
      exit;;
    r)
      log 7 "Reload function called"
      dump
      load
      flushdynblocklist
      exit;;
    a)
      log 7 "Analyze function called"
      analyze
      exit;;
    n)
      # Null - do nothing
      log 6 "Null action option detected!"
      log 7 "Current environment (variables) are:"
      log 7 $(env) 
      exit;;
    v)
      # we've already processed these above, ignore
      ;;
    :)
      log 3 "Option -${OPTARG} requires an argument."
      exit 1
      ;;
    \?)
      log 3 "Invalid option: -${OPTARG}."
      exit 1
      ;;
  esac
done

log 6  "done!"
exit

true
