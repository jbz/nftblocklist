#!/usr/sbin/nft -f

flush ruleset

table inet filter {

	set whitelist {
		type ipv4_addr
        flags interval
		elements = { IP-ADDRESS, IP-ADDRESS-CIDR, IP-ADDR-RANGE }
		comment "accept all connections from these hosts, CIDRs or ranges"
	}

	set blocklist_persist {
		type ipv4_addr
		flags interval
		auto-merge
		comment "drop all packets from these hosts - loaded from config"
	}

	set blocklist_dyn {
		type ipv4_addr
		flags dynamic
		timeout 49h
		comment "drop all packets from these hosts - dynamnic list"
	}

	set ssh_limiter {
		type ipv4_addr
		size 65535
		flags dynamic
		timeout 24h
	}

	counter cnt_http {
		comment "count both http and https packets"
	}

	counter cnt_znc {
		comment "znc client traffic packets"
	}

	chain input {
		type filter hook input priority 0; policy drop;

		# accept localhost traffic
		iif lo accept

		# reject trash traffic
		ct state { invalid } drop
		tcp flags & (fin|syn|rst|ack) != syn ct state { new } drop
		ip saddr @blocklist_persist drop
		ip saddr @blocklist_dyn drop

		# set a counter on http/https traffic
		tcp dport { 80, 443 } counter name cnt_http

		# Permit existing connections' packets through
		ct state { related, established } accept

		# Permit incoming SSH connections only from JB's known IPs
		ip saddr @whitelist tcp dport { 22 } ct state { new } accept

		# Log and drop other SSH connection attempts; blocklist >3/day attempt sources
		tcp dport 22 add @ssh_limiter { ip saddr limit rate 3/day } log prefix "SSH_ATTEMPT: " drop
		tcp dport 22 add @blocklist_dyn { ip saddr } log prefix "IP_BAN: " drop

		# Permit incoming ICMP, ratelimited
		icmp type { echo-request } limit rate 4/second accept

		# Permit new webserver connections
		tcp dport { 80, 443 } ct state { new } accept

		# Permit new ZNC connections, ratelimited
		tcp dport { ZNC_CLIENT_PORT } ct state { new } limit rate 1/second accept 

		# Block any IP trying to make more than 10 blocked conn attempts / min 
		ct state { new, untracked } limit rate over 10/minute add @blocklist_dyn { ip saddr }

		# log all remaining packets (must be last rules in stanza)
		# ip protocol { tcp } counter log prefix "tcp.in.dropped: "
		# ip protocol { udp } counter log prefix "udp.in.dropped: "
	}
	chain forward {
		type filter hook forward priority 0; policy drop;
		
		# log all remaining packets (must be last rules in stanza)
		ip protocol { tcp } counter log prefix "tcp.fwd.dropped: "
		ip protocol { udp } counter log prefix "udp.fwd.dropped: "
	}
	chain output {
		type filter hook output priority 0;
	
		# set a counter on znc traffic
		tcp sport { 16667 } counter name cnt_znc

	}
}
